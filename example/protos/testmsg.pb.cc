// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testmsg.proto

#include "testmsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_testmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessageB_ReqData_testmsg_2eproto;
class TestMessageADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessageA> _instance;
} _TestMessageA_default_instance_;
class TestMessageB_ReqDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessageB_ReqData> _instance;
} _TestMessageB_ReqData_default_instance_;
class TestMessageBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessageB> _instance;
} _TestMessageB_default_instance_;
static void InitDefaultsscc_info_TestMessageA_testmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TestMessageA_default_instance_;
    new (ptr) ::TestMessageA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TestMessageA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessageA_testmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessageA_testmsg_2eproto}, {}};

static void InitDefaultsscc_info_TestMessageB_testmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TestMessageB_default_instance_;
    new (ptr) ::TestMessageB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TestMessageB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessageB_testmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMessageB_testmsg_2eproto}, {
      &scc_info_TestMessageB_ReqData_testmsg_2eproto.base,}};

static void InitDefaultsscc_info_TestMessageB_ReqData_testmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TestMessageB_ReqData_default_instance_;
    new (ptr) ::TestMessageB_ReqData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TestMessageB_ReqData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessageB_ReqData_testmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessageB_ReqData_testmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_testmsg_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_testmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_testmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_testmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestMessageA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TestMessageA, price_),
  PROTOBUF_FIELD_OFFSET(::TestMessageA, id_),
  PROTOBUF_FIELD_OFFSET(::TestMessageA, seq_),
  PROTOBUF_FIELD_OFFSET(::TestMessageA, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestMessageB_ReqData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TestMessageB_ReqData, tid_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB_ReqData, seq_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB_ReqData, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestMessageB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TestMessageB, doubledata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, floatdata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, int64data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, uint64data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, int32data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, fixed64data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, fixed32data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, booldata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, stringdata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, bytesdata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, enumdata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, uint32data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sfixed32data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sfixed64data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sint32data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sint64data_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, msgdata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, doublerepeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, floatrepeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, int64repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, uint64repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, int32repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, fixed64repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, fixed32repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, boolrepeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, stringrepeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, bytesrepeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, enumrepeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, uint32repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sfixed32repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sfixed64repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sint32repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, sint64repeateddata_),
  PROTOBUF_FIELD_OFFSET(::TestMessageB, msgrepeateddata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TestMessageA)},
  { 9, -1, sizeof(::TestMessageB_ReqData)},
  { 17, -1, sizeof(::TestMessageB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TestMessageA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TestMessageB_ReqData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TestMessageB_default_instance_),
};

const char descriptor_table_protodef_testmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtestmsg.proto\"D\n\014TestMessageA\022\r\n\005price"
  "\030\001 \001(\001\022\n\n\002id\030\002 \001(\005\022\013\n\003seq\030\003 \001(\004\022\014\n\004name\030"
  "\004 \001(\t\"\332\007\n\014TestMessageB\022\022\n\ndoubleData\030\001 \001"
  "(\001\022\021\n\tfloatData\030\002 \001(\002\022\021\n\tint64Data\030\003 \001(\003"
  "\022\022\n\nuint64Data\030\004 \001(\004\022\021\n\tint32Data\030\005 \001(\005\022"
  "\023\n\013fixed64Data\030\006 \001(\006\022\023\n\013fixed32Data\030\007 \001("
  "\007\022\020\n\010boolData\030\010 \001(\010\022\022\n\nstringData\030\t \001(\t\022"
  "\021\n\tbytesData\030\n \001(\014\022\"\n\010enumData\030\013 \001(\0162\020.T"
  "estMessageB.MT\022\022\n\nuint32Data\030\014 \001(\r\022\024\n\014sf"
  "ixed32Data\030\r \001(\017\022\024\n\014sfixed64Data\030\016 \001(\020\022\022"
  "\n\nsint32Data\030\017 \001(\021\022\022\n\nsint64Data\030\020 \001(\022\022&"
  "\n\007msgData\030\021 \001(\0132\025.TestMessageB.ReqData\022\032"
  "\n\022doublerepeatedData\030\022 \003(\001\022\031\n\021floatrepea"
  "tedData\030\023 \003(\002\022\031\n\021int64repeatedData\030\024 \003(\003"
  "\022\032\n\022uint64repeatedData\030\025 \003(\004\022\031\n\021int32rep"
  "eatedData\030\026 \003(\005\022\033\n\023fixed64repeatedData\030\027"
  " \003(\006\022\033\n\023fixed32repeatedData\030\030 \003(\007\022\030\n\020boo"
  "lrepeatedData\030\031 \003(\010\022\032\n\022stringrepeatedDat"
  "a\030\032 \003(\t\022\031\n\021bytesrepeatedData\030\033 \003(\014\022*\n\020en"
  "umrepeatedData\030\034 \003(\0162\020.TestMessageB.MT\022\032"
  "\n\022uint32repeatedData\030\035 \003(\r\022\034\n\024sfixed32re"
  "peatedData\030\036 \003(\017\022\034\n\024sfixed64repeatedData"
  "\030\037 \003(\020\022\032\n\022sint32repeatedData\030  \003(\021\022\032\n\022si"
  "nt64repeatedData\030! \003(\022\022.\n\017msgrepeatedDat"
  "a\030\" \003(\0132\025.TestMessageB.ReqData\0321\n\007ReqDat"
  "a\022\013\n\003tid\030\001 \001(\005\022\013\n\003seq\030\002 \001(\004\022\014\n\004name\030\003 \001("
  "\t\"\037\n\002MT\022\007\n\003REQ\020\000\022\007\n\003RSP\020\001\022\007\n\003NTY\020\002b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_testmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_testmsg_2eproto_sccs[3] = {
  &scc_info_TestMessageA_testmsg_2eproto.base,
  &scc_info_TestMessageB_testmsg_2eproto.base,
  &scc_info_TestMessageB_ReqData_testmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_testmsg_2eproto_once;
static bool descriptor_table_testmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_testmsg_2eproto = {
  &descriptor_table_testmsg_2eproto_initialized, descriptor_table_protodef_testmsg_2eproto, "testmsg.proto", 1082,
  &descriptor_table_testmsg_2eproto_once, descriptor_table_testmsg_2eproto_sccs, descriptor_table_testmsg_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_testmsg_2eproto::offsets,
  file_level_metadata_testmsg_2eproto, 3, file_level_enum_descriptors_testmsg_2eproto, file_level_service_descriptors_testmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_testmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_testmsg_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestMessageB_MT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testmsg_2eproto);
  return file_level_enum_descriptors_testmsg_2eproto[0];
}
bool TestMessageB_MT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestMessageB_MT TestMessageB::REQ;
constexpr TestMessageB_MT TestMessageB::RSP;
constexpr TestMessageB_MT TestMessageB::NTY;
constexpr TestMessageB_MT TestMessageB::MT_MIN;
constexpr TestMessageB_MT TestMessageB::MT_MAX;
constexpr int TestMessageB::MT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TestMessageA::InitAsDefaultInstance() {
}
class TestMessageA::_Internal {
 public:
};

TestMessageA::TestMessageA()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestMessageA)
}
TestMessageA::TestMessageA(const TestMessageA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&price_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:TestMessageA)
}

void TestMessageA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessageA_testmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&price_)) + sizeof(id_));
}

TestMessageA::~TestMessageA() {
  // @@protoc_insertion_point(destructor:TestMessageA)
  SharedDtor();
}

void TestMessageA::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestMessageA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessageA& TestMessageA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessageA_testmsg_2eproto.base);
  return *internal_default_instance();
}


void TestMessageA::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMessageA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&price_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* TestMessageA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestMessageA.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessageA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestMessageA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // uint64 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestMessageA.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestMessageA)
  return target;
}

size_t TestMessageA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestMessageA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestMessageA)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessageA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessageA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestMessageA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestMessageA)
    MergeFrom(*source);
  }
}

void TestMessageA::MergeFrom(const TestMessageA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestMessageA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void TestMessageA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestMessageA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessageA::CopyFrom(const TestMessageA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMessageA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageA::IsInitialized() const {
  return true;
}

void TestMessageA::InternalSwap(TestMessageA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(seq_, other->seq_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessageB_ReqData::InitAsDefaultInstance() {
}
class TestMessageB_ReqData::_Internal {
 public:
};

TestMessageB_ReqData::TestMessageB_ReqData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestMessageB.ReqData)
}
TestMessageB_ReqData::TestMessageB_ReqData(const TestMessageB_ReqData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:TestMessageB.ReqData)
}

void TestMessageB_ReqData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessageB_ReqData_testmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(tid_));
}

TestMessageB_ReqData::~TestMessageB_ReqData() {
  // @@protoc_insertion_point(destructor:TestMessageB.ReqData)
  SharedDtor();
}

void TestMessageB_ReqData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestMessageB_ReqData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessageB_ReqData& TestMessageB_ReqData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessageB_ReqData_testmsg_2eproto.base);
  return *internal_default_instance();
}


void TestMessageB_ReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMessageB.ReqData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(tid_));
  _internal_metadata_.Clear();
}

const char* TestMessageB_ReqData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestMessageB.ReqData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessageB_ReqData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestMessageB.ReqData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tid = 1;
  if (this->tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestMessageB.ReqData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestMessageB.ReqData)
  return target;
}

size_t TestMessageB_ReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestMessageB.ReqData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // int32 tid = 1;
  if (this->tid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageB_ReqData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestMessageB.ReqData)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessageB_ReqData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessageB_ReqData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestMessageB.ReqData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestMessageB.ReqData)
    MergeFrom(*source);
  }
}

void TestMessageB_ReqData::MergeFrom(const TestMessageB_ReqData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestMessageB.ReqData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.tid() != 0) {
    _internal_set_tid(from._internal_tid());
  }
}

void TestMessageB_ReqData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestMessageB.ReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessageB_ReqData::CopyFrom(const TestMessageB_ReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMessageB.ReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageB_ReqData::IsInitialized() const {
  return true;
}

void TestMessageB_ReqData::InternalSwap(TestMessageB_ReqData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seq_, other->seq_);
  swap(tid_, other->tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageB_ReqData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessageB::InitAsDefaultInstance() {
  ::_TestMessageB_default_instance_._instance.get_mutable()->msgdata_ = const_cast< ::TestMessageB_ReqData*>(
      ::TestMessageB_ReqData::internal_default_instance());
}
class TestMessageB::_Internal {
 public:
  static const ::TestMessageB_ReqData& msgdata(const TestMessageB* msg);
};

const ::TestMessageB_ReqData&
TestMessageB::_Internal::msgdata(const TestMessageB* msg) {
  return *msg->msgdata_;
}
TestMessageB::TestMessageB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestMessageB)
}
TestMessageB::TestMessageB(const TestMessageB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      doublerepeateddata_(from.doublerepeateddata_),
      floatrepeateddata_(from.floatrepeateddata_),
      int64repeateddata_(from.int64repeateddata_),
      uint64repeateddata_(from.uint64repeateddata_),
      int32repeateddata_(from.int32repeateddata_),
      fixed64repeateddata_(from.fixed64repeateddata_),
      fixed32repeateddata_(from.fixed32repeateddata_),
      boolrepeateddata_(from.boolrepeateddata_),
      stringrepeateddata_(from.stringrepeateddata_),
      bytesrepeateddata_(from.bytesrepeateddata_),
      enumrepeateddata_(from.enumrepeateddata_),
      uint32repeateddata_(from.uint32repeateddata_),
      sfixed32repeateddata_(from.sfixed32repeateddata_),
      sfixed64repeateddata_(from.sfixed64repeateddata_),
      sint32repeateddata_(from.sint32repeateddata_),
      sint64repeateddata_(from.sint64repeateddata_),
      msgrepeateddata_(from.msgrepeateddata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stringdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stringdata().empty()) {
    stringdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stringdata_);
  }
  bytesdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bytesdata().empty()) {
    bytesdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytesdata_);
  }
  if (from._internal_has_msgdata()) {
    msgdata_ = new ::TestMessageB_ReqData(*from.msgdata_);
  } else {
    msgdata_ = nullptr;
  }
  ::memcpy(&doubledata_, &from.doubledata_,
    static_cast<size_t>(reinterpret_cast<char*>(&sint64data_) -
    reinterpret_cast<char*>(&doubledata_)) + sizeof(sint64data_));
  // @@protoc_insertion_point(copy_constructor:TestMessageB)
}

void TestMessageB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessageB_testmsg_2eproto.base);
  stringdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytesdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sint64data_) -
      reinterpret_cast<char*>(&msgdata_)) + sizeof(sint64data_));
}

TestMessageB::~TestMessageB() {
  // @@protoc_insertion_point(destructor:TestMessageB)
  SharedDtor();
}

void TestMessageB::SharedDtor() {
  stringdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytesdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msgdata_;
}

void TestMessageB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessageB& TestMessageB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessageB_testmsg_2eproto.base);
  return *internal_default_instance();
}


void TestMessageB::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMessageB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doublerepeateddata_.Clear();
  floatrepeateddata_.Clear();
  int64repeateddata_.Clear();
  uint64repeateddata_.Clear();
  int32repeateddata_.Clear();
  fixed64repeateddata_.Clear();
  fixed32repeateddata_.Clear();
  boolrepeateddata_.Clear();
  stringrepeateddata_.Clear();
  bytesrepeateddata_.Clear();
  enumrepeateddata_.Clear();
  uint32repeateddata_.Clear();
  sfixed32repeateddata_.Clear();
  sfixed64repeateddata_.Clear();
  sint32repeateddata_.Clear();
  sint64repeateddata_.Clear();
  msgrepeateddata_.Clear();
  stringdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytesdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && msgdata_ != nullptr) {
    delete msgdata_;
  }
  msgdata_ = nullptr;
  ::memset(&doubledata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sint64data_) -
      reinterpret_cast<char*>(&doubledata_)) + sizeof(sint64data_));
  _internal_metadata_.Clear();
}

const char* TestMessageB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double doubleData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          doubledata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float floatData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          floatdata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 int64Data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          int64data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64Data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uint64data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32Data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          int32data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 fixed64Data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          fixed64data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed32 fixed32Data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          fixed32data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // bool boolData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          booldata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stringData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_stringdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestMessageB.stringData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytesData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_bytesdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TestMessageB.MT enumData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_enumdata(static_cast<::TestMessageB_MT>(val));
        } else goto handle_unusual;
        continue;
      // uint32 uint32Data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          uint32data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sfixed32 sfixed32Data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          sfixed32data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 sfixed64Data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          sfixed64data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // sint32 sint32Data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          sint32data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 sint64Data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          sint64data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TestMessageB.ReqData msgData = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double doublerepeatedData = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doublerepeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145) {
          _internal_add_doublerepeateddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float floatrepeatedData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatrepeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157) {
          _internal_add_floatrepeateddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64repeatedData = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_int64repeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64repeatedData = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          _internal_add_uint64repeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32repeatedData = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176) {
          _internal_add_int32repeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 fixed64repeatedData = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_fixed64repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185) {
          _internal_add_fixed64repeateddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 fixed32repeatedData = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_fixed32repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197) {
          _internal_add_fixed32repeateddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated bool boolrepeatedData = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_boolrepeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_boolrepeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stringrepeatedData = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_stringrepeateddata();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TestMessageB.stringrepeatedData"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes bytesrepeatedData = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_bytesrepeateddata();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TestMessageB.MT enumrepeatedData = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_enumrepeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_enumrepeateddata(static_cast<::TestMessageB_MT>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32repeatedData = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232) {
          _internal_add_uint32repeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 sfixed32repeatedData = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_sfixed32repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245) {
          _internal_add_sfixed32repeateddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 sfixed64repeatedData = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_sfixed64repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249) {
          _internal_add_sfixed64repeateddata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated sint32 sint32repeatedData = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_sint32repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_sint32repeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 sint64repeatedData = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_sint64repeateddata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_sint64repeateddata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TestMessageB.ReqData msgrepeatedData = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msgrepeateddata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessageB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestMessageB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double doubleData = 1;
  if (!(this->doubledata() <= 0 && this->doubledata() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_doubledata(), target);
  }

  // float floatData = 2;
  if (!(this->floatdata() <= 0 && this->floatdata() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_floatdata(), target);
  }

  // int64 int64Data = 3;
  if (this->int64data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_int64data(), target);
  }

  // uint64 uint64Data = 4;
  if (this->uint64data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_uint64data(), target);
  }

  // int32 int32Data = 5;
  if (this->int32data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_int32data(), target);
  }

  // fixed64 fixed64Data = 6;
  if (this->fixed64data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_fixed64data(), target);
  }

  // fixed32 fixed32Data = 7;
  if (this->fixed32data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_fixed32data(), target);
  }

  // bool boolData = 8;
  if (this->booldata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_booldata(), target);
  }

  // string stringData = 9;
  if (this->stringdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringdata().data(), static_cast<int>(this->_internal_stringdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestMessageB.stringData");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_stringdata(), target);
  }

  // bytes bytesData = 10;
  if (this->bytesdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_bytesdata(), target);
  }

  // .TestMessageB.MT enumData = 11;
  if (this->enumdata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_enumdata(), target);
  }

  // uint32 uint32Data = 12;
  if (this->uint32data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_uint32data(), target);
  }

  // sfixed32 sfixed32Data = 13;
  if (this->sfixed32data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(13, this->_internal_sfixed32data(), target);
  }

  // sfixed64 sfixed64Data = 14;
  if (this->sfixed64data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(14, this->_internal_sfixed64data(), target);
  }

  // sint32 sint32Data = 15;
  if (this->sint32data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(15, this->_internal_sint32data(), target);
  }

  // sint64 sint64Data = 16;
  if (this->sint64data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(16, this->_internal_sint64data(), target);
  }

  // .TestMessageB.ReqData msgData = 17;
  if (this->has_msgdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::msgdata(this), target, stream);
  }

  // repeated double doublerepeatedData = 18;
  if (this->_internal_doublerepeateddata_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_doublerepeateddata(), target);
  }

  // repeated float floatrepeatedData = 19;
  if (this->_internal_floatrepeateddata_size() > 0) {
    target = stream->WriteFixedPacked(19, _internal_floatrepeateddata(), target);
  }

  // repeated int64 int64repeatedData = 20;
  {
    int byte_size = _int64repeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          20, _internal_int64repeateddata(), byte_size, target);
    }
  }

  // repeated uint64 uint64repeatedData = 21;
  {
    int byte_size = _uint64repeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          21, _internal_uint64repeateddata(), byte_size, target);
    }
  }

  // repeated int32 int32repeatedData = 22;
  {
    int byte_size = _int32repeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          22, _internal_int32repeateddata(), byte_size, target);
    }
  }

  // repeated fixed64 fixed64repeatedData = 23;
  if (this->_internal_fixed64repeateddata_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_fixed64repeateddata(), target);
  }

  // repeated fixed32 fixed32repeatedData = 24;
  if (this->_internal_fixed32repeateddata_size() > 0) {
    target = stream->WriteFixedPacked(24, _internal_fixed32repeateddata(), target);
  }

  // repeated bool boolrepeatedData = 25;
  if (this->_internal_boolrepeateddata_size() > 0) {
    target = stream->WriteFixedPacked(25, _internal_boolrepeateddata(), target);
  }

  // repeated string stringrepeatedData = 26;
  for (int i = 0, n = this->_internal_stringrepeateddata_size(); i < n; i++) {
    const auto& s = this->_internal_stringrepeateddata(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestMessageB.stringrepeatedData");
    target = stream->WriteString(26, s, target);
  }

  // repeated bytes bytesrepeatedData = 27;
  for (int i = 0, n = this->_internal_bytesrepeateddata_size(); i < n; i++) {
    const auto& s = this->_internal_bytesrepeateddata(i);
    target = stream->WriteBytes(27, s, target);
  }

  // repeated .TestMessageB.MT enumrepeatedData = 28;
  {
    int byte_size = _enumrepeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          28, enumrepeateddata_, byte_size, target);
    }
  }

  // repeated uint32 uint32repeatedData = 29;
  {
    int byte_size = _uint32repeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          29, _internal_uint32repeateddata(), byte_size, target);
    }
  }

  // repeated sfixed32 sfixed32repeatedData = 30;
  if (this->_internal_sfixed32repeateddata_size() > 0) {
    target = stream->WriteFixedPacked(30, _internal_sfixed32repeateddata(), target);
  }

  // repeated sfixed64 sfixed64repeatedData = 31;
  if (this->_internal_sfixed64repeateddata_size() > 0) {
    target = stream->WriteFixedPacked(31, _internal_sfixed64repeateddata(), target);
  }

  // repeated sint32 sint32repeatedData = 32;
  {
    int byte_size = _sint32repeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          32, _internal_sint32repeateddata(), byte_size, target);
    }
  }

  // repeated sint64 sint64repeatedData = 33;
  {
    int byte_size = _sint64repeateddata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          33, _internal_sint64repeateddata(), byte_size, target);
    }
  }

  // repeated .TestMessageB.ReqData msgrepeatedData = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgrepeateddata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_msgrepeateddata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestMessageB)
  return target;
}

size_t TestMessageB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestMessageB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double doublerepeatedData = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doublerepeateddata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _doublerepeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float floatrepeatedData = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatrepeateddata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _floatrepeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64repeatedData = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64repeateddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 uint64repeatedData = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64repeateddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int32repeatedData = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32repeateddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 fixed64repeatedData = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed64repeateddata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed64repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 fixed32repeatedData = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed32repeateddata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed32repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool boolrepeatedData = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_boolrepeateddata_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _boolrepeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string stringrepeatedData = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stringrepeateddata_.size());
  for (int i = 0, n = stringrepeateddata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stringrepeateddata_.Get(i));
  }

  // repeated bytes bytesrepeatedData = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bytesrepeateddata_.size());
  for (int i = 0, n = bytesrepeateddata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bytesrepeateddata_.Get(i));
  }

  // repeated .TestMessageB.MT enumrepeatedData = 28;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enumrepeateddata_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enumrepeateddata(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enumrepeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 uint32repeatedData = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32repeateddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint32repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 sfixed32repeatedData = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed32repeateddata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sfixed32repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 sfixed64repeatedData = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed64repeateddata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sfixed64repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 sint32repeatedData = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->sint32repeateddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sint32repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 sint64repeatedData = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->sint64repeateddata_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sint64repeateddata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TestMessageB.ReqData msgrepeatedData = 34;
  total_size += 2UL * this->_internal_msgrepeateddata_size();
  for (const auto& msg : this->msgrepeateddata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string stringData = 9;
  if (this->stringdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stringdata());
  }

  // bytes bytesData = 10;
  if (this->bytesdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytesdata());
  }

  // .TestMessageB.ReqData msgData = 17;
  if (this->has_msgdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgdata_);
  }

  // double doubleData = 1;
  if (!(this->doubledata() <= 0 && this->doubledata() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 int64Data = 3;
  if (this->int64data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int64data());
  }

  // float floatData = 2;
  if (!(this->floatdata() <= 0 && this->floatdata() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 int32Data = 5;
  if (this->int32data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int32data());
  }

  // uint64 uint64Data = 4;
  if (this->uint64data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uint64data());
  }

  // fixed64 fixed64Data = 6;
  if (this->fixed64data() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 fixed32Data = 7;
  if (this->fixed32data() != 0) {
    total_size += 1 + 4;
  }

  // bool boolData = 8;
  if (this->booldata() != 0) {
    total_size += 1 + 1;
  }

  // .TestMessageB.MT enumData = 11;
  if (this->enumdata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enumdata());
  }

  // uint32 uint32Data = 12;
  if (this->uint32data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uint32data());
  }

  // sfixed64 sfixed64Data = 14;
  if (this->sfixed64data() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 sfixed32Data = 13;
  if (this->sfixed32data() != 0) {
    total_size += 1 + 4;
  }

  // sint32 sint32Data = 15;
  if (this->sint32data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sint32data());
  }

  // sint64 sint64Data = 16;
  if (this->sint64data() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_sint64data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestMessageB)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessageB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessageB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestMessageB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestMessageB)
    MergeFrom(*source);
  }
}

void TestMessageB::MergeFrom(const TestMessageB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestMessageB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doublerepeateddata_.MergeFrom(from.doublerepeateddata_);
  floatrepeateddata_.MergeFrom(from.floatrepeateddata_);
  int64repeateddata_.MergeFrom(from.int64repeateddata_);
  uint64repeateddata_.MergeFrom(from.uint64repeateddata_);
  int32repeateddata_.MergeFrom(from.int32repeateddata_);
  fixed64repeateddata_.MergeFrom(from.fixed64repeateddata_);
  fixed32repeateddata_.MergeFrom(from.fixed32repeateddata_);
  boolrepeateddata_.MergeFrom(from.boolrepeateddata_);
  stringrepeateddata_.MergeFrom(from.stringrepeateddata_);
  bytesrepeateddata_.MergeFrom(from.bytesrepeateddata_);
  enumrepeateddata_.MergeFrom(from.enumrepeateddata_);
  uint32repeateddata_.MergeFrom(from.uint32repeateddata_);
  sfixed32repeateddata_.MergeFrom(from.sfixed32repeateddata_);
  sfixed64repeateddata_.MergeFrom(from.sfixed64repeateddata_);
  sint32repeateddata_.MergeFrom(from.sint32repeateddata_);
  sint64repeateddata_.MergeFrom(from.sint64repeateddata_);
  msgrepeateddata_.MergeFrom(from.msgrepeateddata_);
  if (from.stringdata().size() > 0) {

    stringdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stringdata_);
  }
  if (from.bytesdata().size() > 0) {

    bytesdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytesdata_);
  }
  if (from.has_msgdata()) {
    _internal_mutable_msgdata()->::TestMessageB_ReqData::MergeFrom(from._internal_msgdata());
  }
  if (!(from.doubledata() <= 0 && from.doubledata() >= 0)) {
    _internal_set_doubledata(from._internal_doubledata());
  }
  if (from.int64data() != 0) {
    _internal_set_int64data(from._internal_int64data());
  }
  if (!(from.floatdata() <= 0 && from.floatdata() >= 0)) {
    _internal_set_floatdata(from._internal_floatdata());
  }
  if (from.int32data() != 0) {
    _internal_set_int32data(from._internal_int32data());
  }
  if (from.uint64data() != 0) {
    _internal_set_uint64data(from._internal_uint64data());
  }
  if (from.fixed64data() != 0) {
    _internal_set_fixed64data(from._internal_fixed64data());
  }
  if (from.fixed32data() != 0) {
    _internal_set_fixed32data(from._internal_fixed32data());
  }
  if (from.booldata() != 0) {
    _internal_set_booldata(from._internal_booldata());
  }
  if (from.enumdata() != 0) {
    _internal_set_enumdata(from._internal_enumdata());
  }
  if (from.uint32data() != 0) {
    _internal_set_uint32data(from._internal_uint32data());
  }
  if (from.sfixed64data() != 0) {
    _internal_set_sfixed64data(from._internal_sfixed64data());
  }
  if (from.sfixed32data() != 0) {
    _internal_set_sfixed32data(from._internal_sfixed32data());
  }
  if (from.sint32data() != 0) {
    _internal_set_sint32data(from._internal_sint32data());
  }
  if (from.sint64data() != 0) {
    _internal_set_sint64data(from._internal_sint64data());
  }
}

void TestMessageB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestMessageB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessageB::CopyFrom(const TestMessageB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMessageB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageB::IsInitialized() const {
  return true;
}

void TestMessageB::InternalSwap(TestMessageB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doublerepeateddata_.InternalSwap(&other->doublerepeateddata_);
  floatrepeateddata_.InternalSwap(&other->floatrepeateddata_);
  int64repeateddata_.InternalSwap(&other->int64repeateddata_);
  uint64repeateddata_.InternalSwap(&other->uint64repeateddata_);
  int32repeateddata_.InternalSwap(&other->int32repeateddata_);
  fixed64repeateddata_.InternalSwap(&other->fixed64repeateddata_);
  fixed32repeateddata_.InternalSwap(&other->fixed32repeateddata_);
  boolrepeateddata_.InternalSwap(&other->boolrepeateddata_);
  stringrepeateddata_.InternalSwap(&other->stringrepeateddata_);
  bytesrepeateddata_.InternalSwap(&other->bytesrepeateddata_);
  enumrepeateddata_.InternalSwap(&other->enumrepeateddata_);
  uint32repeateddata_.InternalSwap(&other->uint32repeateddata_);
  sfixed32repeateddata_.InternalSwap(&other->sfixed32repeateddata_);
  sfixed64repeateddata_.InternalSwap(&other->sfixed64repeateddata_);
  sint32repeateddata_.InternalSwap(&other->sint32repeateddata_);
  sint64repeateddata_.InternalSwap(&other->sint64repeateddata_);
  msgrepeateddata_.InternalSwap(&other->msgrepeateddata_);
  stringdata_.Swap(&other->stringdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bytesdata_.Swap(&other->bytesdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgdata_, other->msgdata_);
  swap(doubledata_, other->doubledata_);
  swap(int64data_, other->int64data_);
  swap(floatdata_, other->floatdata_);
  swap(int32data_, other->int32data_);
  swap(uint64data_, other->uint64data_);
  swap(fixed64data_, other->fixed64data_);
  swap(fixed32data_, other->fixed32data_);
  swap(booldata_, other->booldata_);
  swap(enumdata_, other->enumdata_);
  swap(uint32data_, other->uint32data_);
  swap(sfixed64data_, other->sfixed64data_);
  swap(sfixed32data_, other->sfixed32data_);
  swap(sint32data_, other->sint32data_);
  swap(sint64data_, other->sint64data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TestMessageA* Arena::CreateMaybeMessage< ::TestMessageA >(Arena* arena) {
  return Arena::CreateInternal< ::TestMessageA >(arena);
}
template<> PROTOBUF_NOINLINE ::TestMessageB_ReqData* Arena::CreateMaybeMessage< ::TestMessageB_ReqData >(Arena* arena) {
  return Arena::CreateInternal< ::TestMessageB_ReqData >(arena);
}
template<> PROTOBUF_NOINLINE ::TestMessageB* Arena::CreateMaybeMessage< ::TestMessageB >(Arena* arena) {
  return Arena::CreateInternal< ::TestMessageB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
